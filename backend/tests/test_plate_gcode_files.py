"""
Tests for G-code file upload functionality in plates.
Tests both model file and G-code file uploads for plates.
"""
import io
import json
import pytest
from fastapi.testclient import TestClient
from sqlalchemy.orm import Session

from app.main import app
from app import models


class TestPlateGcodeFiles:
    """Test G-code file upload functionality for plates."""

    def test_create_plate_with_model_and_gcode_files(self, client: TestClient, db: Session, auth_headers: dict):
        """Test creating a plate with both model file and G-code file."""
        
        # Step 1: Create a filament for the plate
        filament_data = {
            "material": "PLA",
            "color": "Red", 
            "brand": "ESUN"
        }
        filament_response = client.post("/filaments", json=filament_data, headers=auth_headers)
        assert filament_response.status_code == 201
        filament_id = filament_response.json()["id"]
        
        # Add purchase to set price
        purchase_data = {
            "filament_id": filament_id,
            "quantity_kg": 1.0,
            "price_per_kg": 25.0,
            "purchase_date": "2024-01-01"
        }
        client.post("/filament_purchases", json=purchase_data, headers=auth_headers)
        
        # Step 2: Create a product first
        product_data = {
            "name": "Test Product with Plates",
            "print_time_hrs": 2.0,
            "filament_usages": json.dumps([{"filament_id": filament_id, "grams_used": 50.0}])
        }
        product_response = client.post("/products", data=product_data, headers=auth_headers)
        assert product_response.status_code == 200
        product_id = product_response.json()["id"]
        
        # Step 3: Create mock files
        # Create a mock STL file
        stl_content = b"mock stl file content for testing"
        stl_file = ("test_model.stl", io.BytesIO(stl_content), "application/octet-stream")
        
        # Create a mock G-code file
        gcode_content = b"""
; Generated by Test Suite
G21 ; Set units to millimeters
G90 ; Use absolute positioning
M104 S200 ; Set hotend temperature
G28 ; Home all axes
G1 Z0.2 F3000 ; Move to first layer height
G1 X10 Y10 E5 F1500 ; Extrude some filament
M104 S0 ; Turn off hotend
M140 S0 ; Turn off heated bed
"""
        gcode_file = ("test_plate.gcode", io.BytesIO(gcode_content), "text/plain")
        
        # Step 4: Create plate with both files
        plate_data = {
            "name": "Test Plate with G-code",
            "quantity": 2,
            "print_time_hrs": 1.5,
            "filament_usages": json.dumps([{"filament_id": filament_id, "grams_used": 25.0}])
        }
        
        files = {
            "file": stl_file,
            "gcode_file": gcode_file
        }
        
        plate_response = client.post(
            f"/products/{product_id}/plates", 
            data=plate_data,
            files=files,
            headers=auth_headers
        )
        
        assert plate_response.status_code == 200
        plate_data_response = plate_response.json()
        
        # Verify plate was created with both file paths
        assert plate_data_response["name"] == "Test Plate with G-code"
        assert plate_data_response["quantity"] == 2
        assert plate_data_response["print_time_hrs"] == 1.5
        assert plate_data_response["file_path"] is not None
        assert plate_data_response["gcode_path"] is not None
        assert "test_model" in plate_data_response["file_path"]
        assert "test_plate" in plate_data_response["gcode_path"]
        
        # Verify filament usage
        assert len(plate_data_response["filament_usages"]) == 1
        assert plate_data_response["filament_usages"][0]["grams_used"] == 25.0
        assert plate_data_response["filament_usages"][0]["filament_id"] == filament_id

    def test_create_plate_with_only_gcode_file(self, client: TestClient, db: Session, auth_headers: dict):
        """Test creating a plate with only G-code file (no model file)."""
        
        # Create filament and product (reuse setup from previous test)
        filament_data = {"material": "PETG", "color": "Blue", "brand": "ESUN"}
        filament_response = client.post("/filaments", json=filament_data, headers=auth_headers)
        filament_id = filament_response.json()["id"]
        
        purchase_data = {
            "filament_id": filament_id,
            "quantity_kg": 1.0,
            "price_per_kg": 30.0
        }
        client.post("/filament_purchases", json=purchase_data, headers=auth_headers)
        
        product_data = {
            "name": "Test Product Gcode Only",
            "print_time_hrs": 1.0,
            "filament_usages": json.dumps([{"filament_id": filament_id, "grams_used": 30.0}])
        }
        product_response = client.post("/products", data=product_data, headers=auth_headers)
        product_id = product_response.json()["id"]
        
        # Create plate with only G-code file
        gcode_content = b"G21\nG90\nG28\nM104 S0\n"
        gcode_file = ("only_gcode.g", io.BytesIO(gcode_content), "text/plain")
        
        plate_data = {
            "name": "Gcode Only Plate",
            "quantity": 1,
            "print_time_hrs": 0.8,
            "filament_usages": json.dumps([{"filament_id": filament_id, "grams_used": 15.0}])
        }
        
        files = {"gcode_file": gcode_file}
        
        plate_response = client.post(
            f"/products/{product_id}/plates", 
            data=plate_data,
            files=files,
            headers=auth_headers
        )
        
        assert plate_response.status_code == 200
        plate = plate_response.json()
        
        # Verify only G-code file was uploaded
        assert plate["file_path"] is None
        assert plate["gcode_path"] is not None
        assert "only_gcode" in plate["gcode_path"]

    def test_create_plate_with_invalid_gcode_extension(self, client: TestClient, db: Session, auth_headers: dict):
        """Test that invalid G-code file extensions are rejected."""
        
        # Setup filament and product
        filament_data = {"material": "ABS", "color": "Black", "brand": "ESUN"}
        filament_response = client.post("/filaments", json=filament_data, headers=auth_headers)
        filament_id = filament_response.json()["id"]
        
        purchase_data = {
            "filament_id": filament_id,
            "quantity_kg": 1.0,
            "price_per_kg": 28.0
        }
        client.post("/filament_purchases", json=purchase_data, headers=auth_headers)
        
        product_data = {
            "name": "Test Product Invalid Gcode",
            "print_time_hrs": 1.0,
            "filament_usages": json.dumps([{"filament_id": filament_id, "grams_used": 20.0}])
        }
        product_response = client.post("/products", data=product_data, headers=auth_headers)
        product_id = product_response.json()["id"]
        
        # Try to upload file with invalid extension
        invalid_file = ("invalid.txt", io.BytesIO(b"not gcode"), "text/plain")
        
        plate_data = {
            "name": "Invalid Gcode Plate",
            "quantity": 1,
            "print_time_hrs": 1.0,
            "filament_usages": json.dumps([{"filament_id": filament_id, "grams_used": 20.0}])
        }
        
        files = {"gcode_file": invalid_file}
        
        plate_response = client.post(
            f"/products/{product_id}/plates", 
            data=plate_data,
            files=files,
            headers=auth_headers
        )
        
        # Should reject invalid file extension
        assert plate_response.status_code == 400
        assert "Invalid G-code file type" in plate_response.json()["detail"]

    def test_update_plate_with_gcode_file(self, client: TestClient, db: Session, auth_headers: dict):
        """Test updating an existing plate with G-code file."""
        
        # Setup filament and product and initial plate
        filament_data = {"material": "PETG", "color": "Green", "brand": "ESUN"}
        filament_response = client.post("/filaments", json=filament_data, headers=auth_headers)
        filament_id = filament_response.json()["id"]
        
        purchase_data = {
            "filament_id": filament_id,
            "quantity_kg": 1.0,
            "price_per_kg": 32.0
        }
        client.post("/filament_purchases", json=purchase_data, headers=auth_headers)
        
        product_data = {
            "name": "Test Product Update",
            "print_time_hrs": 1.0,
            "filament_usages": json.dumps([{"filament_id": filament_id, "grams_used": 25.0}])
        }
        product_response = client.post("/products", data=product_data, headers=auth_headers)
        product_id = product_response.json()["id"]
        
        # Create initial plate without G-code
        initial_plate_data = {
            "name": "Original Plate",
            "quantity": 1,
            "print_time_hrs": 1.2,
            "filament_usages": json.dumps([{"filament_id": filament_id, "grams_used": 20.0}])
        }
        
        initial_plate_response = client.post(
            f"/products/{product_id}/plates", 
            data=initial_plate_data,
            headers=auth_headers
        )
        plate_id = initial_plate_response.json()["id"]
        
        # Update plate with G-code file
        gcode_content = b"G21\nG90\nG28\nG1 X0 Y0 Z5\nM104 S0\n"
        gcode_file = ("updated.gc", io.BytesIO(gcode_content), "text/plain")
        
        update_data = {
            "name": "Updated Plate with Gcode",
            "print_time_hrs": 1.8
        }
        
        files = {"gcode_file": gcode_file}
        
        update_response = client.patch(
            f"/plates/{plate_id}", 
            data=update_data,
            files=files,
            headers=auth_headers
        )
        
        assert update_response.status_code == 200
        updated_plate = update_response.json()
        
        # Verify updates
        assert updated_plate["name"] == "Updated Plate with Gcode"
        assert updated_plate["print_time_hrs"] == 1.8
        assert updated_plate["gcode_path"] is not None
        assert "updated" in updated_plate["gcode_path"]

    def test_delete_plate_removes_gcode_file(self, client: TestClient, db: Session, auth_headers: dict):
        """Test that deleting a plate also removes associated G-code file from system."""
        
        # Setup filament and product
        filament_data = {"material": "PLA", "color": "White", "brand": "ESUN"}
        filament_response = client.post("/filaments", json=filament_data, headers=auth_headers)
        filament_id = filament_response.json()["id"]
        
        purchase_data = {
            "filament_id": filament_id,
            "quantity_kg": 1.0,
            "price_per_kg": 24.0
        }
        client.post("/filament_purchases", json=purchase_data, headers=auth_headers)
        
        product_data = {
            "name": "Test Product Delete",
            "print_time_hrs": 1.0,
            "filament_usages": json.dumps([{"filament_id": filament_id, "grams_used": 30.0}])
        }
        product_response = client.post("/products", data=product_data, headers=auth_headers)
        product_id = product_response.json()["id"]
        
        # Create plate with G-code file
        gcode_content = b"G28\nM104 S200\nG1 X10 Y10\nM104 S0\n"
        gcode_file = ("to_delete.gcode", io.BytesIO(gcode_content), "text/plain")
        
        plate_data = {
            "name": "Plate to Delete",
            "quantity": 1,
            "print_time_hrs": 1.0,
            "filament_usages": json.dumps([{"filament_id": filament_id, "grams_used": 30.0}])
        }
        
        # Create a second plate first (since we can't delete the last plate)
        dummy_plate_data = {
            "name": "Dummy Plate",
            "quantity": 1,
            "print_time_hrs": 0.5,
            "filament_usages": json.dumps([{"filament_id": filament_id, "grams_used": 15.0}])
        }
        client.post(f"/products/{product_id}/plates", data=dummy_plate_data, headers=auth_headers)
        
        files = {"gcode_file": gcode_file}
        
        plate_response = client.post(
            f"/products/{product_id}/plates", 
            data=plate_data,
            files=files,
            headers=auth_headers
        )
        plate_id = plate_response.json()["id"]
        gcode_path = plate_response.json()["gcode_path"]
        
        # Verify G-code file was created
        assert gcode_path is not None
        
        # Delete the plate
        delete_response = client.delete(f"/plates/{plate_id}", headers=auth_headers)
        assert delete_response.status_code == 200
        
        # Verify plate is deleted (would be tested by trying to get it)
        get_response = client.get(f"/plates/{plate_id}", headers=auth_headers)
        assert get_response.status_code == 404

    def test_valid_gcode_extensions(self, client: TestClient, db: Session, auth_headers: dict):
        """Test that all valid G-code extensions (.gcode, .g, .gc) are accepted."""
        
        # Setup
        filament_data = {"material": "TPU", "color": "Clear", "brand": "ESUN"}
        filament_response = client.post("/filaments", json=filament_data, headers=auth_headers)
        filament_id = filament_response.json()["id"]
        
        purchase_data = {
            "filament_id": filament_id,
            "quantity_kg": 0.5,
            "price_per_kg": 45.0
        }
        client.post("/filament_purchases", json=purchase_data, headers=auth_headers)
        
        product_data = {
            "name": "Test Product Extensions",
            "print_time_hrs": 1.0,
            "filament_usages": json.dumps([{"filament_id": filament_id, "grams_used": 10.0}])
        }
        product_response = client.post("/products", data=product_data, headers=auth_headers)
        product_id = product_response.json()["id"]
        
        # Test each valid extension
        valid_extensions = [".gcode", ".g", ".gc"]
        gcode_content = b"G21\nG90\nG28\n"
        
        for i, ext in enumerate(valid_extensions):
            filename = f"test_file_{i}{ext}"
            gcode_file = (filename, io.BytesIO(gcode_content), "text/plain")
            
            plate_data = {
                "name": f"Plate {ext}",
                "quantity": 1,
                "print_time_hrs": 0.5,
                "filament_usages": json.dumps([{"filament_id": filament_id, "grams_used": 5.0}])
            }
            
            files = {"gcode_file": gcode_file}
            
            plate_response = client.post(
                f"/products/{product_id}/plates", 
                data=plate_data,
                files=files,
                headers=auth_headers
            )
            
            assert plate_response.status_code == 200
            plate = plate_response.json()
            assert plate["gcode_path"] is not None
            assert ext.replace(".", "") in plate["gcode_path"]
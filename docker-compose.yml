services:
  # SQLite database service
  database:
    build:
      context: ./database
      dockerfile: Dockerfile
    image: ${REGISTRY:-ghcr.io}/${NAMESPACE:-jnardiello}/printfarmhq:database-${VERSION:-v2.0.0}
    container_name: printfarmhq-database
    volumes:
      - db-data:/data
      - ./backend/migrations:/migrations:ro
    networks:
      - printfarmhq-network
    healthcheck:
      test: ["CMD", "sqlite3", "/data/hq.db", "SELECT 1;"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: ${REGISTRY:-ghcr.io}/${NAMESPACE:-jnardiello}/printfarmhq:backend-${VERSION:-v2.0.0}
    container_name: printfarmhq-backend
    volumes:
      - ./backend:/app
      - db-data:/data  # Share the database volume
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:////data/hq.db
    depends_on:
      database:
        condition: service_healthy
    networks:
      - printfarmhq-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
        DOCKER_ENV: "true"
    image: ${REGISTRY:-ghcr.io}/${NAMESPACE:-jnardiello}/printfarmhq:frontend-${VERSION:-v2.0.0}
    container_name: printfarmhq-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - DOCKER_ENV=true
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - printfarmhq-network

networks:
  printfarmhq-network:
    driver: bridge

volumes:
  db-data:
    name: printfarmhq-db-data